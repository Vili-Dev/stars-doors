// ===================================================================
// FONCTIONS SASS - STARS DOORS
// Fonctions utilitaires pour le projet
// ===================================================================

// === MANIPULATION DES COULEURS ===
// Fonction pour obtenir une couleur du thème
@function theme-color($key) {
  $theme-colors: (
    primary: $primary-color,
    secondary: $secondary-color,
    success: $success-color,
    danger: $danger-color,
    warning: $warning-color,
    info: $info-color,
    light: $light-color,
    dark: $dark-color
  );
  
  @return map-get($theme-colors, $key);
}

// Fonction pour obtenir une couleur grise
@function gray($key) {
  $grays: (
    100: $gray-100,
    200: $gray-200,
    300: $gray-300,
    400: $gray-400,
    500: $gray-500,
    600: $gray-600,
    700: $gray-700,
    800: $gray-800,
    900: $gray-900
  );
  
  @return map-get($grays, $key);
}

// Fonction pour créer des variations de couleurs
@function color-level($color, $level) {
  $color-base: #ffffff;
  $color-contrast: #000000;
  
  @if $level > 0 {
    @return mix($color-contrast, $color, $level * 10%);
  } @else {
    @return mix($color-base, $color, abs($level) * 10%);
  }
}

// === CALCULS D'ESPACEMENT ===
// Fonction pour obtenir un espacement
@function spacer($key) {
  @return map-get($spacers, $key);
}

// Fonction pour calculer un espacement personnalisé
@function spacing($multiplier) {
  @return $spacer * $multiplier;
}

// === CALCULS DE TAILLES ===
// Fonction pour obtenir une taille de breakpoint
@function breakpoint($key) {
  @return map-get($breakpoints, $key);
}

// Fonction pour calculer une largeur en pourcentage
@function percentage-width($columns, $total: 12) {
  @return percentage($columns / $total);
}

// === CONVERSIONS D'UNITÉS ===
// Conversion px vers rem
@function px-to-rem($px, $base: 16px) {
  @return ($px / $base) * 1rem;
}

// Conversion rem vers px
@function rem-to-px($rem, $base: 16px) {
  @return ($rem * $base) / 1rem;
}

// === CALCULS Z-INDEX ===
// Fonction pour obtenir un z-index
@function z-index($key) {
  $z-indexes: (
    dropdown: $zindex-dropdown,
    sticky: $zindex-sticky,
    fixed: $zindex-fixed,
    modal-backdrop: $zindex-modal-backdrop,
    modal: $zindex-modal,
    popover: $zindex-popover,
    tooltip: $zindex-tooltip,
    toast: $zindex-toast
  );
  
  @return map-get($z-indexes, $key);
}

// === UTILITAIRES MATHÉMATIQUES ===
// Fonction pour arrondir à un nombre de décimales
@function decimal-round($number, $digits: 0) {
  $factor: 1;
  @for $i from 1 through $digits {
    $factor: $factor * 10;
  }
  @return round($number * $factor) / $factor;
}

// Fonction pour obtenir la valeur maximale
@function max($numbers...) {
  $max: nth($numbers, 1);
  @each $number in $numbers {
    @if $number > $max {
      $max: $number;
    }
  }
  @return $max;
}

// Fonction pour obtenir la valeur minimale
@function min($numbers...) {
  $min: nth($numbers, 1);
  @each $number in $numbers {
    @if $number < $min {
      $min: $number;
    }
  }
  @return $min;
}

// === MANIPULATION DE CHAÎNES ===
// Fonction pour remplacer dans une chaîne
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

// === VALIDATION ===
// Fonction pour vérifier si une valeur existe dans une map
@function map-has-key($map, $key) {
  @return map-get($map, $key) != null;
}

// Fonction pour vérifier si une couleur est claire
@function is-light-color($color) {
  @return lightness($color) > 50%;
}

// Fonction pour obtenir la couleur de contraste appropriée
@function contrast-color($color, $light: $white, $dark: $black) {
  @if is-light-color($color) {
    @return $dark;
  } @else {
    @return $light;
  }
}

// === CALCULS SPÉCIFIQUES AU PROJET ===
// Fonction pour calculer la largeur du sidebar
@function sidebar-width($collapsed: false) {
  @if $collapsed {
    @return $sidebar-width-collapsed;
  } @else {
    @return $sidebar-width;
  }
}

// Fonction pour calculer la hauteur de la navbar
@function navbar-height() {
  @return $navbar-height;
}

// === UTILITAIRES POUR LES COMPOSANTS ===
// Fonction pour générer une ombre basée sur l'élévation
@function elevation-shadow($level) {
  $shadows: (
    1: $box-shadow-sm,
    2: $box-shadow,
    3: $box-shadow-lg,
    4: 0 2rem 4rem rgba($black, 0.2),
    5: 0 3rem 6rem rgba($black, 0.25)
  );
  
  @return map-get($shadows, $level);
}

// Fonction pour calculer la couleur de focus
@function focus-color($color) {
  @return rgba($color, 0.25);
}

// === FONCTIONS DE VALIDATION ===
// Vérifier si une unité est relative
@function is-relative-unit($value) {
  $relative-units: 'em', 'rem', '%', 'vw', 'vh', 'vmin', 'vmax';
  @return index($relative-units, unit($value)) != null;
}

// Vérifier si une valeur est un nombre
@function is-number($value) {
  @return type-of($value) == number;
}

// === FONCTIONS D'AIDE POUR LE RESPONSIVE ===
// Fonction pour calculer une taille fluide
@function fluid-size($min-size, $max-size, $min-viewport: 320px, $max-viewport: 1200px) {
  $slope: ($max-size - $min-size) / ($max-viewport - $min-viewport);
  $intersection: -$min-viewport * $slope + $min-size;
  
  @return clamp(#{$min-size}, #{$intersection} + #{$slope * 100vw}, #{$max-size});
}

// === FONCTIONS POUR LES GRILLES ===
// Fonction pour calculer la largeur d'une colonne
@function column-width($columns, $total-columns: 12, $gutter: 30px) {
  $column-width: calc((100% - #{($total-columns - 1) * $gutter}) / #{$total-columns} * #{$columns} + #{($columns - 1) * $gutter});
  @return $column-width;
}